package com.goldenapple.lottery.fragment;

import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.cpiz.android.bubbleview.BubbleLinearLayout;
import com.cpiz.android.bubbleview.BubblePopupWindow;
import com.cpiz.android.bubbleview.BubbleStyle;
import com.goldenapple.lottery.R;
import com.goldenapple.lottery.app.BaseFragment;
import com.goldenapple.lottery.app.FragmentLauncher;
import com.goldenapple.lottery.app.GoldenAppleApp;
import com.goldenapple.lottery.app.LazyBaseFragment;
import com.goldenapple.lottery.base.net.RestCallback;
import com.goldenapple.lottery.base.net.RestRequest;
import com.goldenapple.lottery.base.net.RestRequestManager;
import com.goldenapple.lottery.base.net.RestResponse;
import com.goldenapple.lottery.data.Bet;
import com.goldenapple.lottery.data.BetListCommand;
import com.goldenapple.lottery.data.Lottery;
import com.goldenapple.lottery.data.LotteryListCommand;
import com.goldenapple.lottery.data.Trace;
import com.goldenapple.lottery.data.TraceListCommand;
import com.goldenapple.lottery.material.ConstantInformation;
import com.goldenapple.lottery.material.RecordType;
import com.goldenapple.lottery.util.TimeUtils;
import com.goldenapple.lottery.view.adapter.GameHistoryAdapter;
import com.goldenapple.lottery.view.adapter.HistoryBetPopupWindowAdapter;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import butterknife.BindView;
import in.srain.cube.util.LocalDisplay;

/**
 * Created by ACE-PC on 2016/7/26.
 */
public class BetOrTraceListTagFragment extends LazyBaseFragment implements RadioGroup.OnCheckedChangeListener {

    private static final String TAG = BetOrTraceListTagFragment.class.getSimpleName();

    @BindView(R.id.lotteryButton)
    TextView lotteryButton;
    @BindView(R.id.stateButton)
    TextView stateButton;
    @BindView(R.id.listView)
    ListView listView;
    @BindView(R.id.empty)
    TextView empty;
    @BindView(R.id.refreshLayout)
    //PtrClassicFrameLayout refreshLayout;
            SwipeRefreshLayout refreshLayout;
    /*@BindView(R.id.loadMoreContainer)
    LoadMoreListViewContainer loadMoreContainer;*/

    @BindView(R.id.radioGroup)
    RadioGroup radioGroup;

    @BindView(R.id.lotteryRadioButton)
    RadioButton lotteryRadioButton;
    @BindView(R.id.timeRadioButton)
    RadioButton timeRadioButton;
    @BindView(R.id.stateRadioButton)
    RadioButton stateRadioButton;

    private static final int LOTTERY_LIST_COMMAND = 0;//彩票种类信息查询
    private static final int BET_LIST_COMMAND = 1;//请求状态ID 投注记录
    private static final int TRACE_LIST_COMMAND = 2;//请求状态ID 追号记录

    private static final int RECORD_TYPE_SELECT = 0; //记录类型
    private static final int FIRST_PAGE = 1;  //默认页数
    private boolean isBet;
    private boolean isFirstTime = true;
    private int totalCount;

    //private int currentLotterySelectedIndex = 0; //记录选择器选择
    //private int currentLotteryQueryConditionType = -1; //当前彩种ID
    //private int currentRecordQueryConditionType = RECORD_TYPE_SELECT;    //0 投注记录 1 追号记录
    private int page = FIRST_PAGE;         //记录页数
    private boolean isLoading = false;     //加载状态

    private Lottery initLottery = null;
    //private DoublePicker picker;    //滚轮选择器
    private GameHistoryAdapter adapter;    //记录布局器
    private RecordType recordType;
    private List items = new ArrayList();    //记录查询数据
    private static ArrayList<String> firstData = new ArrayList<>();
    private static ArrayList<String> secondData = new ArrayList<>(Arrays.asList("投注记录", "追号记录"));


    private BubblePopupWindow adapterPopupWindow;

    private HistoryBetPopupWindowAdapter mTransferAdapter;
    private List<Lottery> mHistoryBetPopupList = null;

    private int mSelectLotteryPosition = -1;//彩种选中位置
    private int mSelectTimePosition = 0;//时间选中位置
    private int mSelectStatePosition = -1;//状态选中位置

    private int mCurrentLotterySelectId = -1;//选择彩种ID
    private Date mCurrentTimeSelectStart;//起始时间
    private Date mCurrentTimeSelectEnd;//结束时间
    private int mCurrentStateSelect = -1;//状态

    private RadioButton mCheckedView;

    private final int LOTTERY_SELECT = 1;//选择彩种查询
    private final int TIME_SELECT = 2;//时间查询
    private final int STATE_SELECT = 3; //状态查询

    private int mCurrentQueryConditionType = -1;

    //投注记录
    public static void launchBet(BaseFragment fragment) {
        Bundle bundle = new Bundle();
        bundle.putBoolean("isBet", true);
        FragmentLauncher.launch(fragment.getActivity(), BetOrTraceListTagFragment.class, bundle);
    }

    //追号记录
    public static void launchTrace(BaseFragment fragment) {
        Bundle bundle = new Bundle();
        bundle.putBoolean("isBet", false);
        FragmentLauncher.launch(fragment.getActivity(), BetOrTraceListTagFragment.class, bundle);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle
            savedInstanceState) {
        isBet = getArguments().getBoolean("isBet");
        return inflateView(inflater, container, true, "游戏记录", R.layout.fragment_bet_or_trace_list, true, true);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        radioGroup.setOnCheckedChangeListener(this);

        refreshLayout.setColorSchemeColors(Color.parseColor("#ff0000"), Color.parseColor("#00ff00"), Color.parseColor
                ("#0000ff"), Color.parseColor("#f234ab"));
        refreshLayout.setOnRefreshListener(() ->
        {
            if (isBet) {
                loadBetList(/*false,*/ FIRST_PAGE);
            } else {
                loadTraceList(/*false,*/ FIRST_PAGE);
            }
        });
        final int endTrigger = 2; // load more content 2 items before the end
        listView.setOnScrollListener(new AbsListView.OnScrollListener() {

            @Override
            public void onScrollStateChanged(AbsListView arg0, int arg1) {

            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                /*if (listView.getCount() != 0 && items.size() < totalCount && listView.getLastVisiblePosition() >=
                        (listView.getCount() - 1) - endTrigger)*/
                if (listView.getCount() != 0) {
                    if (totalCount > 0) {
                        if (listView.getLastVisiblePosition() >= (listView.getCount() - 1) - endTrigger) {
                            if (isBet) {
                                loadBetList(/*false,*/ page + 1);
                            } else {
                                loadTraceList(/*false,*/ page + 1);
                            }
                        }
                    }
                }
            }
        });
        adapter = new GameHistoryAdapter(view.getContext(), this);
        listView.setAdapter(adapter);

        mCurrentTimeSelectStart = TimeUtils.getBeginDateOfToday();
        mCurrentTimeSelectEnd = TimeUtils.getEndDateOfToday();
        if (page == FIRST_PAGE) {
            //            if (isBet) {
            //                loadBetList(isFirstTime, FIRST_PAGE);
            //            } else {
            //                loadTraceList(isFirstTime, FIRST_PAGE);
            //            }
            //默认不加载缓存的数据
            if (isBet) {
                loadBetList(/*false,*/ FIRST_PAGE);
            } else {
                loadTraceList(/*false,*/ FIRST_PAGE);
            }
        }
        isFirstTime = false;

        initPopupWindow();
    }

    @Override
    public void onFirstUserVisible() {
        new AsyncTask<Void, Void, Boolean>() {

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                //显示加载进度对话框
                dialogShow("正在加载...");
            }

            @Override
            protected Boolean doInBackground(Void... params) {
                try {
                    Thread.sleep(500);
                    //在这里添加调用接口获取数据的代码
                    recordType = ConstantInformation.getLotteryModel(getContext());
                    initData();
                    //doSomething()
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return true;
            }

            @Override
            protected void onPostExecute(Boolean aBoolean) {
                if (aBoolean) {
                    // 加载成功
                    initView();
                    // 渲染页面
                } else {
                    // 加载失败
                }
                //关闭对话框
                dialogHide();
            }
        }.execute();
    }

    public void onUserVisible() {
        defaultChoice();
        initViewData();
    }

    private void initView() {
        empty.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                refreshLayout.setVisibility(View.VISIBLE);
                //refreshLayout.autoRefresh();
            }
        });

        // 为listview的创建一个headerview,注意，如果不加会影响到加载的footview的显示！
        View headerMarginView = new View(getContext());
        headerMarginView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                LocalDisplay.dp2px(20)));
        listView.addHeaderView(headerMarginView);

        adapter = new GameHistoryAdapter(getContext(), this);
        listView.setAdapter(adapter);
        /*refreshLayout.setPtrHandler(new PtrHandler()
        {
            @Override
            public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header)
            {
                return PtrDefaultHandler.checkContentCanBePulledDown(frame, listView, header);
            }
            
            @Override
            public void onRefreshBegin(PtrFrameLayout frame)
            {
                frame.postDelayed(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        page = FIRST_PAGE;
                        autoRefresh(page);
                    }
                }, 300);
            }
        });
        // the following are default settings
        refreshLayout.setResistance(1.7f);
        refreshLayout.setRatioOfHeaderHeightToRefresh(1.2f);
        refreshLayout.setDurationToClose(200);
        refreshLayout.setDurationToCloseHeader(1000);
        refreshLayout.setLoadingMinTime(1000);
        refreshLayout.setPullToRefresh(true);
        refreshLayout.setLastUpdateTimeRelateObject(this);
        refreshLayout.setKeepHeaderWhenRefresh(true);*/
        
        /*loadMoreContainer.setAutoLoadMore(true);//设置是否自动加载更多
        loadMoreContainer.useDefaultHeader();
        //5.添加加载更多的事件监听
        loadMoreContainer.setLoadMoreHandler(new LoadMoreHandler()
        {
            @Override
            public void onLoadMore(LoadMoreContainer moreContainer)
            {
                //模拟加载更多的业务处理
                loadMoreContainer.postDelayed(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        page = page + 1;
                        autoRefresh(page);
                    }
                }, 300);
            }
        });*/
        
        /*picker = new DoublePicker(getActivity(), firstData, secondData);
        picker.setDividerVisible(true);
        picker.setCycleDisable(true);
        picker.setTextColor(getResources().getColor(R.color.app_main));
        picker.setDividerColor(getResources().getColor(R.color.app_main));
        picker.setContentPadding(15, 10);
        picker.setOnPickListener(new DoublePicker.OnPickListener()
        {
            @Override
            public void onPicked(int selectedFirstIndex, int selectedSecondIndex)
            {
                if (firstData.size() > 0 && secondData.size() > 0)
                {
                    showToast(firstData.get(selectedFirstIndex) + " " + secondData.get(selectedSecondIndex));
                    currentLotterySelectedIndex = selectedFirstIndex;
                    currentRecordQueryConditionType = selectedSecondIndex;
                    if (selectedFirstIndex == 0)
                    {
                        currentLotteryQueryConditionType = -1;
                    } else
                    {
                        Lottery currentLottery = recordType.getLotteryInfo(selectedFirstIndex - 1).lottery;
                        ConstantInformation.setLotteryEmblem(currentLottery);
                        lotteryButton.setText(currentLottery.getName());
                        currentLotteryQueryConditionType = currentLottery.getId();
                    }
                    lotteryButton.setText(firstData.get(currentLotterySelectedIndex));
                    stateButton.setText(secondData.get(selectedSecondIndex));
                    if (refreshLayout != null)
                    {
                        refreshLayout.autoRefresh();
                    }
                }
            }
        });
        initViewData();*/
    }

    private void initData() {
        firstData.clear();
        if (recordType.getLotteryInfos() != null && recordType.getLotteryInfos().size() > 0) {
            InitLotteryData();
            defaultChoice();
        }
    }

    private void initViewData() {
        /*if (initLottery != null)
        {
            currentLotteryQueryConditionType = initLottery.getId();
            lotteryButton.setText(initLottery.getName());
        } else
        {
            currentLotteryQueryConditionType = -1;
            if (firstData.size() > 0)
            {
                lotteryButton.setText(firstData.get(currentLotterySelectedIndex));
            } else
            {
                lotteryButton.setText("全部记录");
            }
        }
        stateButton.setText(secondData.get(currentRecordQueryConditionType));*/
        //refreshLayout.autoRefresh(true);
        //picker.setSelectedIndex(currentLotterySelectedIndex, currentRecordQueryConditionType);
    }

    /**
     * 初使化数据
     */

    private void InitLotteryData() {
        firstData.add("全部记录");
        for (int i = 0; i < recordType.getLotteryInfos().size(); i++) {
            Lottery l = recordType.getLotteryInfo(i).lottery;
            if (l.getGameType() == 1) {
                firstData.add(l.getName());
            }
        }
    }

    /**
     * 初始化显示彩种
     */
    private void defaultChoice() {
        /*if (ConstantInformation.getLotteryEmblem() != null)
        {
            initLottery = ConstantInformation.getLotteryEmblem();
        }
        
        if (initLottery != null)
        {
            for (int i = 0; i < firstData.size(); i++)
            {
                String name = firstData.get(i);
                if (name.equals(initLottery.getName()))
                {
                    currentLotterySelectedIndex = i;
                }
            }
        }*/
    }
    
    /*private void autoRefresh(int page)
    {
        switch (currentRecordQueryConditionType)
        {
            case 0:
                loadBetList(page);
                break;
            case 1:
                loadTraceList(page);
                break;
        }
    }*/
    
    /*@OnClick({R.id.lotteryButton, R.id.stateButton})
    public void onClick(View view)
    {
        switch (view.getId())
        {
            case R.id.lotteryButton:
            case R.id.stateButton:
                picker.show();
                break;
        }
    }*/


    private void loadBetList(int page) {
        if (isLoading) {
            return;
        }
        this.page = page;
        BetListCommand command = new BetListCommand();
        /*if (currentLotteryQueryConditionType != -1)
        {
            command.setLotteryId(currentLotteryQueryConditionType + "");
        }*/
        //if (mCurrentLotterySelectId != -1)
        {
            command.setLotteryId(mCurrentLotterySelectId);
        }
        command.setStart_time(mCurrentTimeSelectStart);
        command.setEnd_time(mCurrentTimeSelectEnd);
        command.setStatus(mCurrentStateSelect);
        command.setPage(page);
        TypeToken typeToken = new TypeToken<RestResponse<ArrayList<Bet>>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(getActivity(), command, typeToken, restCallback,
                BET_LIST_COMMAND, this);
        restRequest.execute();
    }

    private void loadTraceList(int page) {
        if (isLoading) {
            return;
        }
        this.page = page;
        TraceListCommand command = new TraceListCommand();
        //if (currentLotteryQueryConditionType != -1)
        {
            command.setLotteryId(mCurrentLotterySelectId);
        }
        command.setStart_time(mCurrentTimeSelectStart);
        command.setEnd_time(mCurrentTimeSelectEnd);
        command.setStatus(mCurrentStateSelect);
        command.setPage(page);
        TypeToken typeToken = new TypeToken<RestResponse<ArrayList<Trace>>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(getActivity(), command, typeToken, restCallback,
                TRACE_LIST_COMMAND, this);
        restRequest.execute();
    }

    /**
     * 彩票种类信息查询
     */
    private void loadLotteryList() {
        if (GoldenAppleApp.getUserCentre().getUserInfo() == null) {
            return;
        }
        LotteryListCommand lotteryListCommand = new LotteryListCommand();
        lotteryListCommand.setToken(GoldenAppleApp.getUserCentre().getUserInfo().getToken());
        TypeToken typeToken = new TypeToken<RestResponse<ArrayList<Lottery>>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(getActivity(), lotteryListCommand, typeToken,
                restCallback, LOTTERY_LIST_COMMAND, this);
        restRequest.execute();
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        Lottery lottery = new Lottery();
        List<Lottery> lotteryList = new ArrayList<Lottery>();

        switch (checkedId) {
            case R.id.lotteryRadioButton:
                mCheckedView = lotteryRadioButton;
                if (!mCheckedView.isChecked()) {
                    return;
                }
                mCurrentQueryConditionType = LOTTERY_SELECT;

                //彩种选择的时候 时间和状态选择就不可点击了，彩种全部显示出来后才让时间和状态选择就可以点击
                timeRadioButton.setEnabled(false);
                stateRadioButton.setEnabled(false);

                loadLotteryList();//彩票种类信息查询
                break;
            case R.id.timeRadioButton:
                mCheckedView = timeRadioButton;
                if (!mCheckedView.isChecked()) {
                    return;
                }
                mCurrentQueryConditionType = TIME_SELECT;

                lotteryList = new ArrayList<>();
                String[] timeStates = new String[]{"今天", "昨天", "近7天", "当月"};
                for (int i = 0; i < timeStates.length; i++) {
                    lottery = new Lottery();
                    lottery.setId(i);
                    lottery.setName(timeStates[i]);
                    lotteryList.add(lottery);
                }

                mTransferAdapter.setData(lotteryList, mSelectTimePosition);
                adapterPopupWindow.showArrowTo(mCheckedView, BubbleStyle.ArrowDirection.Up);

                break;
            case R.id.stateRadioButton:
                mCheckedView = stateRadioButton;
                if (!mCheckedView.isChecked()) {
                    return;
                }
                mCurrentQueryConditionType = STATE_SELECT;

                String[] states;

                if (isBet) {
                    //状态 [-1:全部，0:未开奖，2:未中奖，1:已中奖，65535:已撤单]
                    states = new String[]{"全部状态", "待开奖", "已中奖", "未中奖", "已撤销", "系统撤销"};
                } else {
                    //状态[-1:全部,0:未开始,1:正在进行,2:已完成,3:已取消]
                    states = new String[]{"全部状态", "已完成", "进行中", "用户终止", "系统终止"/*, "管理员终止"*/};
                }
                for (int i = 0; i < states.length; i++) {
                    lottery = new Lottery();
                    lottery.setId(i);
                    lottery.setName(states[i]);
                    lotteryList.add(lottery);
                }

                mTransferAdapter.setData(lotteryList, mSelectStatePosition);
                adapterPopupWindow.showArrowTo(mCheckedView, BubbleStyle.ArrowDirection.Up);

                break;
        }
    }

    private void initPopupWindow() {
        View rootView = LayoutInflater.from(getContext()).inflate(R.layout.fragment_history_bet_popupwindow, null);
        BubbleLinearLayout bubbleView = (BubbleLinearLayout) rootView.findViewById(R.id.popup_bubble);
        adapterPopupWindow = new BubblePopupWindow(rootView, bubbleView);
        adapterPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                if (mCheckedView.isChecked()) {
                    radioGroup.clearCheck();
                }
            }
        });

        mHistoryBetPopupList = new ArrayList<>();

        mTransferAdapter = new HistoryBetPopupWindowAdapter(getContext(), mHistoryBetPopupList);
        mTransferAdapter.setOnIssueNoClickListener((Lottery lottery) ->
        {

            if (mCurrentQueryConditionType == LOTTERY_SELECT) {
                mCurrentLotterySelectId = lottery.getId();
                lotteryRadioButton.setText(lottery.getName());
                mSelectLotteryPosition = mCurrentLotterySelectId;

            } else if (mCurrentQueryConditionType == TIME_SELECT) {
                selectPositionToTimeSelected(lottery.getId());
                timeRadioButton.setText(lottery.getName());
                mSelectTimePosition = lottery.getId();

            } else if (mCurrentQueryConditionType == STATE_SELECT) {
                selectPositionToStateSelected(lottery.getId());
                stateRadioButton.setText(lottery.getName());
                mSelectStatePosition = lottery.getId();
            } else {

            }
            if (isBet) {
                loadBetList(/*false, */FIRST_PAGE);
            } else {
                loadTraceList(/*false, */FIRST_PAGE);
            }
            adapterPopupWindow.dismiss();
        });
        ListView listView = (ListView) rootView.findViewById(R.id.listView);
        listView.setAdapter(mTransferAdapter);
    }


    private void selectPositionToStateSelected(int position) {
        if (isBet) {
            //状态 [-1:全部，0:未开奖，2:未中奖，1:已中奖，65535:已撤单]
            switch (position) {
                case 0://全部
                    mCurrentStateSelect = -1;
                    break;
                case 1://待开奖
                    mCurrentStateSelect = 0;
                    break;
                case 2://已中奖
                    mCurrentStateSelect = 3;
                    break;
                case 3://未中奖
                    mCurrentStateSelect = 2;
                    break;
                case 4://已撤单
                    mCurrentStateSelect = 1;
                    break;
                case 5://系统撤销
                    mCurrentStateSelect = 5;
                    break;
                default:
                    mCurrentStateSelect = -1;
                    break;
            }
        } else {
            //状态[-1:全部,0:未开始,1:正在进行,2:已完成,3:已取消]
            switch (position) {
                case 0://全部
                    mCurrentStateSelect = -1;
                    break;
                case 1://已完成
                    mCurrentStateSelect = 1;
                    break;
                case 2://进行中
                    mCurrentStateSelect = 0;
                    break;
                case 3://用户终止
                    mCurrentStateSelect = 2;
                    break;
                case 4://系统终止
                    mCurrentStateSelect = 4;
                    break;
                /*case 5://管理员终止
                    mCurrentStateSelect = 3;
                    break;*/
                default:
                    mCurrentStateSelect = -1;
                    break;
            }
        }
    }

    private void selectPositionToTimeSelected(int position) {
        switch (position) {
            case 0://"今天"
                mCurrentTimeSelectStart = TimeUtils.getBeginDateOfToday();
                mCurrentTimeSelectEnd = TimeUtils.getEndDateOfToday();
                break;
            case 1://"昨天"
                mCurrentTimeSelectStart = TimeUtils.getBeginDateOfYesterday();
                mCurrentTimeSelectEnd = TimeUtils.getEndDateOfYesterday();
                break;
            case 2://"近7天"
                mCurrentTimeSelectStart = TimeUtils.getLatelyDateOfSeven();
                mCurrentTimeSelectEnd = TimeUtils.getEndDateOfToday();
                break;
            case 3://"当月"
                mCurrentTimeSelectStart = TimeUtils.getLatelyDateOfThisMonth();
                mCurrentTimeSelectEnd = TimeUtils.getEndDateOfToday();
                break;
            default:
                break;
        }
    }

    private RestCallback restCallback = new RestCallback() {
        @Override
        public boolean onRestComplete(RestRequest request, RestResponse response) {
            switch (request.getId()) {
                case LOTTERY_LIST_COMMAND:
                    if (response.getData() != null) {
                        ArrayList<Lottery> lotteries = new ArrayList<>();
                        for (Lottery lottery : (ArrayList<Lottery>) response.getData())
                            if (lottery.getGameType() != 5)
                                lotteries.add(lottery);
                        mTransferAdapter.setData(lotteries, mSelectLotteryPosition);

                        adapterPopupWindow.showArrowTo(mCheckedView, BubbleStyle.ArrowDirection.Up, 1);

                        timeRadioButton.setEnabled(true);
                        stateRadioButton.setEnabled(true);
                    }
                    break;
                case BET_LIST_COMMAND:
                case TRACE_LIST_COMMAND:
                    if (response.getData() == null) {
                        items.clear();
                    } else {
                        if (page == FIRST_PAGE) {
                            items.clear();
                        }
                        List data = (ArrayList) response.getData();
                        totalCount = data.size();
                        items.addAll(data);
                        adapter.setData(items);
                        /*if (data.size() == 0 || items.size() >= 100)
                        {
                            loadMoreContainer.loadMoreFinish(false, false);
                        } else
                        {
                            loadMoreContainer.loadMoreFinish(false, true);
                        }*/
                        if (adapter.getCount() > 0) {
                            empty.setVisibility(View.GONE);
                        } else {
                            empty.setVisibility(View.VISIBLE);
                        }
                    }
                    break;
            }
            return true;
        }

        @Override
        public boolean onRestError(RestRequest request, int errCode, String errDesc) {
            if (errCode == 3004 || errCode == 2016) {
                signOutDialog(getActivity(), errCode);
                return true;
            } else {
                showToast(errDesc);
            }
            return false;
        }

        @Override
        public void onRestStateChanged(RestRequest request, @RestRequest.RestState int state) {
            if ((request.getId() == BET_LIST_COMMAND && isBet) || (request.getId() == TRACE_LIST_COMMAND && !isBet)) {
                refreshLayout.setRefreshing(state == RestRequest.RUNNING);
                isLoading = state == RestRequest.RUNNING;
                //refreshLayout.refreshComplete();
            }
        }
    };

}
